import { useEffect, useRef, useState } from "react"

/**
 * üéØ –°–∏–º—É–ª—è—Ü–∏—è –±—Ä–æ—Å–∫–∞ –ø–æ–¥ —É–≥–ª–æ–º –∫ –≥–æ—Ä–∏–∑–æ–Ω—Ç—É (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –¢–ó)
 * ‚Äî –¶–≤–µ—Ç–∞: –∑–µ–º–ª—è #D6DCE5, –ø—É—à–∫–∞ #ADB9CA, –∫–æ–ª–µ—Å–æ #8497B0, —è–¥—Ä–æ #ADB9CA,
 *   —Å–ª–µ–¥ #ADB9CA (—Ä–∞—Å—Ç–≤–æ—Ä—è–µ—Ç—Å—è), –º–∏—à–µ–Ω—å #C00000/#F2F2F2
 * ‚Äî –ì–æ—Ä–∏–∑–æ–Ω—Ç ~92% H (–∑–µ–º–ª—è 8%). –ö–æ–ª–µ—Å–æ —Å—Ç–æ–∏—Ç –Ω–∞ –∑–µ–º–ª–µ; —Å—Ç–≤–æ–ª –∫–æ—Ä–æ—á–µ √ó1.5 –∏ —Ç–æ–ª—â–µ √ó1.5.
 * ‚Äî g-–ø–æ–¥—Å–∫–∞–∑–∫–∞ —Ä—è–¥–æ–º —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º, —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–µ–∑–∂–∞–µ—Ç.
 * ‚Äî –ú–∏—à–µ–Ω–∏ (4 –∫—Ä—É–≥–∞) ‚Äî —Ç–µ–ø–µ—Ä—å –∏—Ö –î–í–ï; –∫–∞–∂–¥–∞—è —Å–ø–∞–≤–Ω–∏—Ç—Å—è –Ω–µ –±–ª–∏–∂–µ –∫ –ø—É—à–∫–µ, —á–µ–º 0.4 * H.
 * ‚Äî –ü–æ–ø–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª—è–µ—Ç —Å–Ω–∞—Ä—è–¥ –∏ —Ä–µ—Å–ø–∞–≤–Ω–∏—Ç —Ç–æ–ª—å–∫–æ —Ç—É –º–∏—à–µ–Ω—å, –≤ –∫–æ—Ç–æ—Ä—É—é –ø–æ–ø–∞–ª–∏.
 */

const TXT = {
  ru: { title: "–ë—Ä–æ—Å–æ–∫ –ø–æ–¥ —É–≥–ª–æ–º", g: "–£—Å–∫–æ—Ä–µ–Ω–∏–µ g", air: "–°–æ–ø—Ä–æ—Ç–∏–≤–ª–µ–Ω–∏–µ –≤–æ–∑–¥—É—Ö–∞", reset: "–°–±—Ä–æ—Å", qTitle: "–í–æ–ø—Ä–æ—Å—ã" },
  en: { title: "Projectile Motion", g: "Gravity g", air: "Air resistance", reset: "Reset", qTitle: "Questions" },
  sr: { title: "–ë–∞—Ü–∞–Ω—ò–µ –ø–æ–¥ —É–≥–ª–æ–º", g: "–£–±—Ä–∑–∞—ö–µ g", air: "–û—Ç–ø–æ—Ä –≤–∞–∑–¥—É—Ö–∞", reset: "–ü–æ—á–µ—Ç–∞–∫", qTitle: "–ü–∏—Ç–∞—ö–∞" },
}

const UNITS = {
  ru: { g: "–º/—Å¬≤", air: "1/—Å" },
  en: { g: "m/s¬≤", air: "1/s" },
  sr: { g: "–º/—Å¬≤", air: "1/—Å" },
}

const QA = {
  ru: [
    "–ö —á–µ–º—É –ø—Ä–∏–≤–æ–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–µ –¥—Ä—É–≥–∏—Ö —Ç–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ó–µ–º–ª–∏ –∏–ª–∏ –≤–æ–∑–¥—É—Ö–∞) –Ω–∞ –¥–≤–∏–∂—É—â–µ–µ—Å—è —Ç–µ–ª–æ? –ö–∞–∫ –ø—Ä–∏ —ç—Ç–æ–º –∏–∑–º–µ–Ω—è–µ—Ç—Å—è –µ–≥–æ —Å–∫–æ—Ä–æ—Å—Ç—å?",
    "–ö–∞–∫ –¥–≤–∏–∂–µ—Ç—Å—è —Ç–µ–ª–æ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –Ω–µ–≥–æ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –¥—Ä—É–≥–∏—Ö —Ç–µ–ª?",
  ],
  sr: [
    "–î–æ —á–µ–≥–∞ –¥–æ–≤–æ–¥–∏ –¥–µ–ª–æ–≤–∞—ö–µ –¥—Ä—É–≥–∏—Ö —Ç–µ–ª–∞ (–Ω–∞ –ø—Ä–∏–º–µ—Ä, –ó–µ–º—ô–µ –∏–ª–∏ –≤–∞–∑–¥—É—Ö–∞) –Ω–∞ —Ç–µ–ª–æ –∫–æ—ò–µ —Å–µ –∫—Ä–µ—õ–µ? –ö–∞–∫–æ —Å–µ –ø—Ä–∏ —Ç–æ–º–µ –º–µ—ö–∞ —ö–µ–≥–æ–≤–∞ –±—Ä–∑–∏–Ω–∞?",
    "–ö–∞–∫–æ —Å–µ –∫—Ä–µ—õ–µ —Ç–µ–ª–æ –∞–∫–æ –Ω–∞ —ö–µ–≥–∞ –Ω–µ –¥–µ–ª—É—ò—É –¥—Ä—É–≥–∞ —Ç–µ–ª–∞?",
  ],
  en: [
    "What is the effect of other bodies (for example, the Earth or air) on a moving body? How does its speed change in this case?",
    "How does a body move if no other bodies act on it?",
  ],
}

// –¢–µ–ª–∞ —Å g –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [0..10] (–±–µ–∑ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –º–∞—Å—Å–µ)
const PLANETS = [
  { name: "–¶–µ—Ä–µ—Ä–∞", g: 0.27 },
  { name: "–ü–ª—É—Ç–æ–Ω", g: 0.62 },
  { name: "–≠—Ä–∏–¥–∞", g: 0.82 },
  { name: "–ï–≤—Ä–æ–ø–∞", g: 1.31 },
  { name: "–ö–∞–ª–ª–∏—Å—Ç–æ", g: 1.24 },
  { name: "–ì–∞–Ω–∏–º–µ–¥", g: 1.43 },
  { name: "–¢–∏—Ç–∞–Ω", g: 1.35 },
  { name: "–õ—É–Ω–∞", g: 1.62 },
  { name: "–ò–æ", g: 1.80 },
  { name: "–ú–µ—Ä–∫—É—Ä–∏–π", g: 3.70 },
  { name: "–ú–∞—Ä—Å", g: 3.71 },
  { name: "–£—Ä–∞–Ω", g: 8.69 },
  { name: "–í–µ–Ω–µ—Ä–∞", g: 8.87 },
  { name: "–ó–µ–º–ª—è", g: 9.8 },
]

export default function ProjectileSim({ lang = "ru" }) {
  const t = TXT[lang] || TXT.ru
  const units = UNITS[lang] || UNITS.ru

  const [g, setG] = useState(9.8)
  const [air, setAir] = useState(0.05)
  const [shots, setShots] = useState([])

  const canvasRef = useRef(null)
  const gunRef = useRef({ x: 120, y: 360, angle: -Math.PI/4 })
  const mouseRef = useRef({ x: 0, y: 0, down: false })

  // ‚¨áÔ∏è –ë—ã–ª –æ–¥–∏–Ω targetRef, —Ç–µ–ø–µ—Ä—å –º–∞—Å—Å–∏–≤ –∏–∑ –¥–≤—É—Ö –º–∏—à–µ–Ω–µ–π
  const targetsRef = useRef([]) // [{x,y,r}, {x,y,r}]

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —è–¥—Ä–∞/–º–∏—à–µ–Ω–∏ (—É–≤–µ–ª–∏—á–µ–Ω—ã –≤ 1.5√ó)
  const BALL_R = 9
  const TARGET_R = BALL_R * 2 // –¥–∏–∞–º–µ—Ç—Ä = 2√ó –¥–∏–∞–º–µ—Ç—Ä —è–¥—Ä–∞

  useEffect(() => {
    const cv = canvasRef.current; if (!cv) return
    const move = (e) => { const r = cv.getBoundingClientRect(); mouseRef.current.x = e.clientX - r.left; mouseRef.current.y = e.clientY - r.top }
    const down = (e) => { if (e.button === 0) mouseRef.current.down = true }
    const up = () => { mouseRef.current.down = false }
    cv.addEventListener('mousemove', move); cv.addEventListener('mousedown', down); window.addEventListener('mouseup', up)
    return () => { cv.removeEventListener('mousemove', move); cv.removeEventListener('mousedown', down); window.removeEventListener('mouseup', up) }
  }, [])

  // –°–ø–∞–≤–Ω–∏–º –î–í–ï –º–∏—à–µ–Ω–∏ –ø–æ—Å–ª–µ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏ –æ—Ç –ø—É—à–∫–∏
  useEffect(() => {
    const cv = canvasRef.current; if (!cv) return
    const W = cv.width, H = cv.height
    const horizonY = Math.round(H * 0.92)
    const gun = gunRef.current
    const minDist = 0.4 * H
    targetsRef.current = [
      spawnTargetAwayFromGun(W, H, horizonY, TARGET_R, gun, minDist),
      spawnTargetAwayFromGun(W, H, horizonY, TARGET_R, gun, minDist),
    ]
  }, [])

  useEffect(() => {
    let raf = 0, prev = performance.now()
    const tick = (now) => {
      const dt = Math.min((now - prev) / 1000, 1/30); prev = now
      const cv = canvasRef.current; const ctx = cv.getContext('2d'); const W = cv.width, H = cv.height

      // –ì–æ—Ä–∏–∑–æ–Ω—Ç ~ 92% –≤—ã—Å–æ—Ç—ã (–∑–µ–º–ª—è = 8%)
      const horizonY = Math.round(H * 0.92)

      // —Ñ–æ–Ω: –≤–µ—Ä—Ö ‚Äî –Ω–µ–±–æ (–±–µ–ª—ã–π), –Ω–∏–∑ ‚Äî –∑–µ–º–ª—è (#D6DCE5)
      ctx.clearRect(0,0,W,H)
      ctx.fillStyle = '#FFFFFF'; ctx.fillRect(0,0,W,horizonY)
      ctx.fillStyle = '#D6DCE5'; ctx.fillRect(0,horizonY,W,H - horizonY)

      // –≥–µ–æ–º–µ—Ç—Ä–∏—è –ø—É—à–∫–∏
      const wheelR = 24
      const gun = gunRef.current
      gun.y = horizonY - wheelR // –∫–æ–ª–µ—Å–æ –æ–ø–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –∑–µ–º–ª—é

      // –Ω–∞–≤–µ–¥–µ–Ω–∏–µ –Ω–∞ –∫—É—Ä—Å–æ—Ä
      const dx = mouseRef.current.x - gun.x
      const dy = mouseRef.current.y - gun.y
      gun.angle = Math.atan2(dy, dx)

      // –≤—ã—Å—Ç—Ä–µ–ª (—É—Å–∏–ª–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∏–∑ –¥—É–ª–∞)
      if (mouseRef.current.down) {
        const dist = Math.hypot(dx, dy)
        const v0 = Math.min(dist / 6, 800)
        const vx = v0 * Math.cos(gun.angle)
        const vy = v0 * Math.sin(gun.angle)
        const muzzle = barrelMuzzle(gun.x, gun.y, gun.angle)
        const shot = { x: muzzle.x, y: muzzle.y, vx, vy, path: [[muzzle.x, muzzle.y]] }
        shots.push(shot); setShots([...shots]); mouseRef.current.down = false
      }

      // –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è/–ø–æ–ø–∞–¥–∞–Ω–∏—è
      for (let s of shots) {
        integrateRK4(s, dt, g, air)
        s.path.push([s.x, s.y])
        // –æ—Ç—Å–∫–æ–∫ –æ—Ç –∑–µ–º–ª–∏
        if (s.y > horizonY - BALL_R && s.vy > 0) {
          s.y = horizonY - BALL_R
          const e = Math.sqrt(0.9) // –ø–æ—Ç–µ—Ä—è 10% —ç–Ω–µ—Ä–≥–∏–∏
          s.vy = -s.vy * e
          s.vx = s.vx * e
        }
        // –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –ª—é–±—É—é –∏–∑ –º–∏—à–µ–Ω–µ–π
        for (let i = 0; i < targetsRef.current.length; i++) {
          const tgt = targetsRef.current[i]
          if (!tgt) continue
          const d = Math.hypot(s.x - tgt.x, s.y - tgt.y)
          if (d <= tgt.r) {
            s.hit = true
            // —Ä–µ—Å–ø–∞–≤–Ω–∏–º –¢–û–õ–¨–ö–û —ç—Ç—É –º–∏—à–µ–Ω—å, —Å–æ–±–ª—é–¥–∞—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç –ø—É—à–∫–∏
            targetsRef.current[i] = spawnTargetAwayFromGun(
              W, H, horizonY, TARGET_R, gunRef.current, 0.4 * H
            )
            break
          }
        }
        // –¥–µ—Ç–µ–∫—Ü–∏—è ¬´–æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è¬ª
        const speed = Math.hypot(s.vx, s.vy)
        const nearGround = s.y >= horizonY - BALL_R - 1.5
        if (speed < 12 && nearGround) { s.restTime = (s.restTime || 0) + dt } else { s.restTime = 0 }
      }

      // —É–¥–∞–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–≤—à–∏—Ö—Å—è/—É—à–µ–¥—à–∏—Ö/–ø–æ–ø–∞–≤—à–∏—Ö –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–ª–µ–¥–∞
      for (let i = shots.length - 1; i >= 0; i--) {
        const s = shots[i]
        const offscreen = s.x < -10 || s.x > W + 10
        const stopped = (s.restTime || 0) > 0.35
        if (s.hit || offscreen || stopped) shots.splice(i, 1)
        if (s.path.length > 300) s.path.splice(0, s.path.length - 300)
      }

      // –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –†–û–í–ù–û –¥–≤–µ –º–∏—à–µ–Ω–∏
      const minDist = 0.4 * H
      while (targetsRef.current.length < 2) {
        targetsRef.current.push(
          spawnTargetAwayFromGun(W, H, horizonY, TARGET_R, gunRef.current, minDist)
        )
      }

      // –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–∏—à–µ–Ω–µ–π
      for (const tgt of targetsRef.current) drawTarget(ctx, tgt)

      // —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ (—Ä–∞—Å—Ç–≤–æ—Ä—è—é—Ç—Å—è, —Ü–≤–µ—Ç #ADB9CA) –∏ —Å–Ω–∞—Ä—è–¥—ã
      for (let s of shots) {
        const n = s.path.length
        for (let i = 1; i < n; i++) {
          const [x1, y1] = s.path[i - 1]
          const [x2, y2] = s.path[i]
          const a = (i / n) * 0.5 // –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å 0..0.5
          ctx.strokeStyle = `rgba(173,185,202,${a.toFixed(3)})` // #ADB9CA
          ctx.lineWidth = 1
          ctx.beginPath(); ctx.moveTo(x1, y1); ctx.lineTo(x2, y2); ctx.stroke()
        }
        // —è–¥—Ä–æ
        ctx.fillStyle = '#ADB9CA'
        ctx.beginPath(); ctx.arc(s.x, s.y, BALL_R, 0, Math.PI*2); ctx.fill()
      }

      // —Å—Ç–≤–æ–ª ‚Äî –∫–æ—Ä–æ—á–µ √ó1.5 –∏ —Ç–æ–ª—â–µ √ó1.5, —Å—É–∂–∞—é—â–∏–π—Å—è –∏ —Å–æ —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º
      drawBarrel(ctx, gun.x, gun.y, gun.angle)
      // –∫–æ–ª–µ—Å–æ –ø–æ–≤–µ—Ä—Ö —Å—Ç–≤–æ–ª–∞
      ctx.fillStyle = '#8497B0'; ctx.beginPath(); ctx.arc(gun.x, gun.y, 24, 0, Math.PI*2); ctx.fill()

      raf = requestAnimationFrame(tick)
    }
    raf = requestAnimationFrame(tick)
    return () => cancelAnimationFrame(raf)
  }, [shots, g, air])

  // –ø–æ–¥–ø–∏—Å—å –ø–ª–∞–Ω–µ—Ç—ã —Ä—è–¥–æ–º —Å –ø–æ–ª–∑—É–Ω–∫–æ–º g (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏, —ç–ª–ª–∏–ø—Å–∏—Å)
  const planet = pickPlanet(g)
  const planetHint = planet ? `‚âà ${planet.name}` : ""

  return (
    <div className="container">
      <h1 className="page-title">{t.title}</h1>
      <div className="panel" style={{ display:'flex', flexDirection:'column', gap:12 }}>
        <Row label={t.g} unit={units.g} value={g} onChange={setG} min={0} max={10} step={0.1} digits={1} hint={planetHint} />
        <Row label={t.air} unit={units.air} value={air} onChange={setAir} min={0} max={1} step={0.01} digits={2} />
        <button onClick={() => setShots([])}>{t.reset}</button>
      </div>

      <canvas ref={canvasRef} className="canvas-frame" width={960} height={480} />

      <details className="panel" style={{ marginTop: 12 }}>
        <summary style={{ cursor:'pointer', fontWeight:700 }}>{t.qTitle}</summary>
        <div style={{ padding:'8px 4px 6px' }}>
          <ol style={{ paddingLeft:'1.2em', margin:'6px 0', display:'grid', gap:6 }}>
            {(QA[lang] || QA.ru).map((q,i) => (<li key={i}>{q}</li>))}
          </ol>
        </div>
      </details>
    </div>
  )
}

function Row({ label, unit, value, onChange, min, max, step, digits, hint }) {
  const fmt = value.toFixed(digits ?? 1)
  return (
    <label className="control-row" style={{
      display:'grid',
      gridTemplateColumns:'minmax(140px,auto) 1fr 110px 160px',
      alignItems:'center', gap:8
    }}>
      <span className="label">{label}</span>
      <input style={{ width:'100%' }} type="range" min={min} max={max} step={step} value={value} onChange={e => onChange(Number(e.target.value))} />
      <span className="value" style={{ width:110, fontVariantNumeric:'tabular-nums', textAlign:'right', whiteSpace:'nowrap' }}>{fmt} {unit}</span>
      <span style={{ width:160, opacity:0.9, whiteSpace:'nowrap', overflow:'hidden', textOverflow:'ellipsis' }}>{hint || ''}</span>
    </label>
  )
}

function integrateRK4(s, dt, g, air) { let left = dt, hMax = 1/240; while (left > 0) { const h = Math.min(hMax, left); rk4Step(s, h, g, air); left -= h } }
function rk4Step(s, h, g, air) {
  const f = ({ x, y, vx, vy }) => ({ dx: vx, dy: vy, dvx: -air*vx, dvy: g - air*vy })
  const k1 = f(s)
  const k2 = f({ x: s.x + 0.5*h*k1.dx, y: s.y + 0.5*h*k1.dy, vx: s.vx + 0.5*h*k1.dvx, vy: s.vy + 0.5*h*k1.dvy })
  const k3 = f({ x: s.x + 0.5*h*k2.dx, y: s.y + 0.5*h*k2.dy, vx: s.vx + 0.5*h*k2.dvx, vy: s.vy + 0.5*h*k2.dvy })
  const k4 = f({ x: s.x + h*k3.dx, y: s.y + h*k3.dy, vx: s.vx + h*k3.dvx, vy: s.vy + h*k3.dvy })
  s.x += (h/6)*(k1.dx + 2*k2.dx + 2*k3.dx + k4.dx)
  s.y += (h/6)*(k1.dy + 2*k2.dy + 2*k3.dy + k4.dy)
  s.vx += (h/6)*(k1.dvx + 2*k2.dvx + 2*k3.dvx + k4.dvx)
  s.vy += (h/6)*(k1.dvy + 2*k2.dvy + 2*k3.dvy + k4.dvy)
}

function pickPlanet(g) { const round1 = (v)=>Math.round(v*10)/10; const target = round1(g); return PLANETS.find(p => round1(p.g) === target) || null }

// –°—Ç–≤–æ–ª ‚Äî –∫–æ—Ä–æ—á–µ √ó1.5 –∏ —Ç–æ–ª—â–µ √ó1.5, —Å—É–∂–∞—é—â–∏–π—Å—è –∏ —Å–æ —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º —É –∫–∞–∑—ë–Ω–Ω–æ–π —á–∞—Å—Ç–∏
function drawBarrel(ctx, x, y, angle){
  const L0 = 95, tBack0 = 26, tFront0 = 18
  const L = Math.round(L0 / 1.5)          // –∫–æ—Ä–æ—á–µ –≤ 1.5 —Ä–∞–∑–∞
  const tBack = Math.round(tBack0 * 1.5)   // —Ç–æ–ª—â–µ –≤ 1.5 —Ä–∞–∑–∞
  const tFront = Math.round(tFront0 * 1.5)
  const backR = tBack/2
  ctx.save(); ctx.translate(x, y); ctx.rotate(angle)
  ctx.fillStyle = '#ADB9CA'
  ctx.beginPath()
  ctx.moveTo(0, -tBack/2)
  ctx.lineTo(L, -tFront/2)
  ctx.lineTo(L,  tFront/2)
  ctx.lineTo(0,  tBack/2)
  ctx.closePath(); ctx.fill()
  ctx.beginPath(); ctx.arc(0, 0, backR, Math.PI/2, -Math.PI/2, true); ctx.fill()
  ctx.restore()
}

// –¢–æ—á–∫–∞ —É –¥—É–ª–∞ –¥–ª—è —Å–ø–∞—É–Ω–∞ —è–¥—Ä–∞
function barrelMuzzle(x, y, angle){
  const L0 = 95; const L = Math.round(L0 / 1.5)
  return { x: x + Math.cos(angle)*L, y: y + Math.sin(angle)*L }
}

// –ú–∏—à–µ–Ω—å: –±–æ—Ä–¥–æ–≤—ã–π/—Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—á–µ—Å–∫–∏–µ –∫—Ä—É–≥–∏
function drawTarget(ctx, tgt){
  if (!tgt) return; const { x, y, r } = tgt
  const colors = ['#C00000', '#F2F2F2', '#C00000', '#F2F2F2']
  for (let i=0;i<4;i++){
    ctx.fillStyle = colors[i]
    ctx.beginPath(); ctx.arc(x, y, r*(1 - i*0.25), 0, Math.PI*2); ctx.fill()
  }
}

// –ù–æ–≤—ã–π —Å–ø–∞–≤–Ω: –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –≤—ã—à–µ –∑–µ–º–ª–∏, –Ω–æ –ù–ï –±–ª–∏–∂–µ –∫ –ø—É—à–∫–µ, —á–µ–º minDist
function spawnTargetAwayFromGun(W, H, horizonY, r, gun, minDist){
  const margin = 20
  const xMin = margin + r, xMax = W - margin - r
  const yMin = margin + r, yMax = horizonY - margin - r

  for (let tries = 0; tries < 100; tries++){
    const x = rand(xMin, xMax)
    const y = rand(yMin, yMax)
    const d = Math.hypot(x - gun.x, y - gun.y)
    if (d >= minDist) return { x, y, r }
  }
  // –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî —Ç–æ—á–∫–∞ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –æ—Ç –ø—É—à–∫–∏
  const ang = Math.random() * Math.PI * 2
  const x = clamp(gun.x + Math.cos(ang) * minDist, xMin, xMax)
  const y = clamp(gun.y + Math.sin(ang) * minDist, yMin, yMax)
  return { x, y, r }
}

// (–°—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–ø–∞–≤–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ —Å–ª—É—á–∞–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –±—É–¥—É—â–µ–º)
function spawnTarget(W, horizonY, r){
  const margin = 20
  const xMin = Math.max(W*0.55, margin + r), xMax = W - margin - r
  const yMin = margin + r, yMax = horizonY - margin - r
  return { x: rand(xMin, xMax), y: rand(yMin, yMax), r }
}

function rand(a,b){ return a + Math.random()*(b-a) }
function clamp(v, a, b){ return Math.max(a, Math.min(b, v)) }
